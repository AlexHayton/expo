{"version":3,"file":"commands.js","sourceRoot":"","sources":["../src/commands.ts"],"names":[],"mappings":"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","sourcesContent":["import commander from 'commander';\nimport process from 'process';\n\nimport {\n  findModulesAsync,\n  resolveModulesAsync,\n  verifySearchResults,\n  generatePackageListAsync,\n} from '.';\nimport { GenerateOptions, ResolveOptions, SearchOptions, SearchResults } from './types';\n\n/**\n * Registers a command that only searches for available expo modules.\n */\nfunction registerSearchCommand<OptionsType = SearchOptions>(\n  commandName: string,\n  fn: (search: SearchResults, options: OptionsType) => any\n) {\n  return commander\n    .command(`${commandName} [paths...]`)\n    .option<string[] | null>(\n      '-i, --ignore-paths <ignorePaths...>',\n      'Paths to ignore when looking up for modules.',\n      (value, previous) => (previous ?? []).concat(value)\n    )\n    .option<string[] | null>(\n      '-e, --exclude <exclude...>',\n      'Package names to exclude when looking up for modules.',\n      (value, previous) => (previous ?? []).concat(value)\n    )\n    .action(async (searchPaths, options) => {\n      console.time('all');\n      if (searchPaths.length) {\n        // If none search path is provided, we will let it use search paths from the config in `package.json`.\n        options.searchPath = searchPaths;\n      }\n      const searchResults = await findModulesAsync(options);\n      await fn(searchResults, options);\n      console.timeEnd('all');\n    });\n}\n\n/**\n * Registers a command that searches for modules and then resolves them for specific platform.\n */\nfunction registerResolveCommand<OptionsType = ResolveOptions>(\n  commandName: string,\n  fn: (search: SearchResults, options: OptionsType) => any\n) {\n  return registerSearchCommand<OptionsType>(commandName, fn).option(\n    '-p, --platform [platform]',\n    'The platform that the resulted modules must support. Available options: \"ios\", \"android\"',\n    'ios'\n  );\n}\n\n// Searches for available expo modules.\nregisterSearchCommand('search', async results => {\n  console.log(require('util').inspect(results, false, null, true));\n});\n\n// Checks whether there are no resolving issues in the current setup.\nregisterSearchCommand('verify', results => {\n  const numberOfDuplicates = verifySearchResults(results);\n  if (!numberOfDuplicates) {\n    console.log('âœ… Everything is fine!');\n  }\n});\n\n// Searches for available expo modules and resolves the results for given platform.\nregisterResolveCommand('resolve', async (results, options) => {\n  const modules = await resolveModulesAsync(results, options);\n\n  if (options.json) {\n    console.log(JSON.stringify(modules));\n  } else {\n    console.log(modules);\n  }\n}).option<boolean>('-j, --json', 'Output results in the plain JSON format.', () => true, false);\n\n// Generates a source file listing all packages to link.\nregisterResolveCommand<GenerateOptions>('generate-package-list', async (results, options) => {\n  const modules = await resolveModulesAsync(results, options);\n  generatePackageListAsync(modules, options);\n})\n  .option(\n    '-t, --target <path>',\n    'Path to the target file, where the package list should be written to.'\n  )\n  .option(\n    '-n, --namespace <namespace>',\n    'Java package name under which the package list should be placed.'\n  );\n\ncommander\n  .version(require('expo-module-autolinking/package.json').version)\n  .description('CLI command that searches for Expo modules to autolink them.')\n  .parseAsync(process.argv);\n"]}